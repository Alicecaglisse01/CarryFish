const { Client, GatewayIntentBits, EmbedBuilder } = require("discord.js");
const fs = require("fs");
const path = require("path");
const config = require("./config");

const client = new Client({ intents: [GatewayIntentBits.Guilds, GatewayIntentBits.GuildMessages, GatewayIntentBits.MessageContent, GatewayIntentBits.GuildMessageReactions] });

let leaderboard = {};

// Charger le classement si existe
const leaderboardFile = "leaderboard.json";
if (fs.existsSync(leaderboardFile)) {
  leaderboard = JSON.parse(fs.readFileSync(leaderboardFile));
}

// Sauvegarder le classement
function saveLeaderboard() {
  fs.writeFileSync(leaderboardFile, JSON.stringify(leaderboard, null, 2));
}

// Envoyer un poisson al√©atoire
async function sendFish() {
  const channelId = config.channels[Math.floor(Math.random() * config.channels.length)];
  const channel = client.channels.cache.get(channelId);

  
  if (!channel) return;
  
  const fishImage = config.fishImages[Math.floor(Math.random() * config.fishImages.length)];
  const message = await channel.send({ content: "üêü Blup blup ! Un poisson sauvage appara√Æt !", files: [fishImage] });

  await message.react("üêü");

  // V√©rifier qui r√©agit en premier
  const filter = (reaction, user) => reaction.emoji.name === "üêü" && !user.bot;
  const collector = message.createReactionCollector({ filter, max: 1, time: 60000 });

  collector.on("collect", (reaction, user) => {
    leaderboard[user.username] = (leaderboard[user.username] || 0) + 1;
    saveLeaderboard();
    message.delete();
    channel.send(`üéâ ${user} a attrap√© le poisson et gagne 1 point ! üèÜ`);
  });

  collector.on("end", (collected) => {
    if (collected.size === 0) {
      channel.send("Le poisson s'est √©chapp√©... üò¢");
    }
  });
}

// Variable pour savoir si le jeu a d√©marr√©
let gameStarted = false;
let fishInterval;

// Lancer le bot
client.once("ready", () => {
  console.log(`üêü CarryFish est en ligne sous ${client.user.tag} !`);
});

// Commande !startpoisson
client.on("messageCreate", (message) => {
  // V√©rifier si l'utilisateur est un admin et si la commande est !startpoisson
  if (message.content.startsWith("!startpoisson") && message.member.permissions.has("ADMINISTRATOR")) {
    // R√©cup√©rer le message de la commande (tout apr√®s !startpoisson)
    const args = message.content.split(" ").slice(1).join(" ");
    
    // Message par d√©faut si aucun argument n'est donn√©
    let explanation = args || "üé£ **La chasse aux poissons commence !**\n" +
    "Bienvenue dans le jeu de p√™che ! Toutes les 10 minutes, un poisson sauvage appara√Ætra dans un salon choisi al√©atoirement. üêü\n" +
    "Les membres doivent r√©agir au message avec l'emoji üêü pour attraper le poisson et gagner 1 point !\n" +
    "Bonne chance √† tous les p√™cheurs ! üéâ";

    // Cr√©er un embed pour le message d'explication
    const embed = new EmbedBuilder()
      .setColor("#0099ff")
      .setTitle("üé£ Concours de p√™che lanc√© !")
      .setDescription(explanation);

    // Envoyer le message d'explication dans #g√©n√©ral
    const generalChannel = message.guild.channels.cache.get("1164586303153782897");
    if (!generalChannel) return message.reply("Le salon #g√©n√©ral n'existe pas.");
    generalChannel.send({ embeds: [embed] });

    // D√©marrer le jeu (si ce n'est pas d√©j√† fait)
    if (!gameStarted) {
      gameStarted = true;
      fishInterval = setInterval(sendFish, 600000); // Un poisson toutes les 10 minutes ‚úÖ
    } else {
      message.channel.send("La chasse aux poissons a d√©j√† commenc√© !");
    }
  }

  // Commande !forcepoisson pour forcer l'apparition d'un poisson
  if (message.content === "!forcepoisson" && message.member.permissions.has("ADMINISTRATOR")) {
    // Forcer l'apparition imm√©diate d'un poisson
    sendFish();
    
    // Reprendre l'intervalle normal apr√®s 10 minutes
    clearInterval(fishInterval);
    fishInterval = setInterval(sendFish, 600000); // Un poisson toutes les 10 minute apr√®s l'apparition forc√©e
    message.channel.send("üêü Un poisson sauvage a √©t√© forc√© d'appara√Ætre ! Le jeu continue.");
  }

 // Commande !score pour afficher le classement
 if (message.content === "!score") {
    // Cr√©er un embed pour afficher le classement
    const embed = new EmbedBuilder()
      .setColor("#0099ff")
      .setTitle("üèÜ Classement des p√™cheurs üèÜ");

    // Cr√©er le classement pour tout le monde
    let ranking = Object.entries(leaderboard)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10) // On affiche seulement les 10 premiers
      .map(entry => `${entry[0]} - ${entry[1]} pts`)
      .join("\n");

    embed.setDescription(ranking || "Aucun p√™cheur pour l'instant !");
    
    // Ajouter la position de l'utilisateur
    const userRank = Object.entries(leaderboard)
      .sort((a, b) => b[1] - a[1])
      .findIndex(entry => entry[0] === message.author.username) + 1;
    
    const userPoints = leaderboard[message.author.username] || 0;

    // Modification pour afficher "1√®re place" pour la 1√®re position
    let userPosition = "";
    if (userRank === 1) {
      userPosition = `Tu es actuellement √† la **1√®re place** avec **${userPoints} points**.`;
    } else {
      userPosition = `Tu es actuellement √† la **${userRank}√®me place** avec **${userPoints} points**.`;
    }

    embed.addFields({
      name: "üîπ Votre position :",
      value: userPosition,
      inline: false
    });

    embed.setFooter({ text: "Merci d'avoir particip√© !" });

    // Afficher l'embed avec le classement dans le salon
    message.channel.send({ embeds: [embed] });
  }

  // Commande !stoppoisson pour arr√™ter le jeu
  if (message.content === "!stoppoisson" && message.member.permissions.has("ADMINISTRATOR")) {
    // Arr√™ter l'intervalle de poissons
    clearInterval(fishInterval);
    gameStarted = false;

    // Afficher le message de fin avec le classement final dans #g√©n√©ral
    let finalRanking = Object.entries(leaderboard)
      .sort((a, b) => b[1] - a[1])
      .slice(0, 10) // Afficher seulement les 10 premiers
      .map((entry, index) => `${index + 1}. ${entry[0]} - ${entry[1]} pts`)
      .join("\n");

    // Cr√©er un embed pour afficher le classement final
    const embed = new EmbedBuilder()
      .setColor("#ff0000")
      .setTitle("üé£ Concours de p√™che termin√© ! üé£")
      .setDescription(`Voici le classement final des p√™cheurs :\n\n${finalRanking || "Aucun p√™cheur n'a particip√© !"}\n\nMerci √† tous d'avoir particip√© !`)
      .setFooter({ text: "√Ä bient√¥t pour un nouveau concours !" });

    // Envoyer l'embed dans #g√©n√©ral
    const generalChannel = message.guild.channels.cache.find(ch => ch.name === "g√©n√©ral");
    if (!generalChannel) return message.reply("Le salon #g√©n√©ral n'existe pas.");

    generalChannel.send({ embeds: [embed] });
  }
});

client.login(config.token);
